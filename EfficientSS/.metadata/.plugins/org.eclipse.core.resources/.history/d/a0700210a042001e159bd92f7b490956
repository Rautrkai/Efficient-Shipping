package com.app.EfficientSS.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.app.EfficientSS.beans.Customer;
import com.app.EfficientSS.beans.Item_Details;
import com.app.EfficientSS.beans.Payment;
import com.app.EfficientSS.dao.CustomerDao;
import com.app.EfficientSS.dao.ItemDao;
import com.app.EfficientSS.dao.PaymentDao;
import com.app.EfficientSS.dao.TransporterDao;
import com.app.EfficientSS.beans.*;


@Service
public class PaymentServiceImpl implements PaymentService{


		@Autowired
		private CustomerDao cdao;
		
		@Autowired
		private ItemDao idao;
		
		@Autowired
		private TransporterDao T_repo;
		
		@Autowired
		private PaymentDao P_Repo;
		
		
		public ResponseEntity<Payment> customerPayment(Payment payment,int cust_id, long item_Id) {
			try {
				Customer cust=cdao.getById(cust_id);
				Item_Details idetail=idao.findByItemId(item_Id);
				
				Transporter trans = new Transporter();
				
				List<Bidder> bid=idetail.getBidder();
				
				for (Bidder b: bid) {
					if(b.getB_selection_status().equalsIgnoreCase("Selected")) {
						trans=b.getTransporter();
					}
				}
				
				Long profit=((payment.getC_payment()*30)/100);
						
				Long Bank_bal=payment.getBank_balance()+profit;
				
				payment.setBank_balance(Bank_bal);
				payment.setT_payment(payment.getC_payment()-profit);
				
				payment.setC_name(cust.getC_first_name()+" "+cust.getC_middle_name()+" "+cust.getC_last_name());
				payment.setPayment_status("Done");
				payment.setT_name(trans.getT_first_name()+" "+trans.getT_middle_name()+" "+trans.getT_last_name());
				
				payment.setCustomer(cust);
				payment.setItem_detail(idetail);
				payment.setTransporter(trans);
				
				Payment pay=P_Repo.save(payment);
				
				return new ResponseEntity<>(pay,HttpStatus.OK);
			
			} catch (Exception e) {
				
				return new ResponseEntity<>(HttpStatus.EXPECTATION_FAILED);
			}
			
			
			
		}

		public ResponseEntity<List<Payment>> transporterCheckPayment(int t_id) {
			
			try {
				List<Payment> payments=P_Repo.getbyTransporterId(t_id);
				
				if(payments.isEmpty()) {
					return new ResponseEntity<>(HttpStatus.NO_CONTENT);
				}else {
					return new ResponseEntity<>(payments,HttpStatus.OK);
				}
			} catch (Exception e) {
				
				return new ResponseEntity<>(HttpStatus.EXPECTATION_FAILED);
				
			}
			
		}

		public ResponseEntity<List<Payment>> CheckPayment() {
			
			try{
				List<Payment> payments=P_Repo.findAll();
			
				return new ResponseEntity<>(payments,HttpStatus.OK);
			
			} catch (Exception e) {
		
				return new ResponseEntity<>(HttpStatus.EXPECTATION_FAILED);
		
			}
		}
		
	}

}
