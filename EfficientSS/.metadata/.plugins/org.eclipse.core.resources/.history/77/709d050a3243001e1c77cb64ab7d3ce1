package com.app.EfficientSS.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.rsocket.server.RSocketServer.Transport;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.app.EfficientSS.beans.Bidder;
import com.app.EfficientSS.beans.Customer;
import com.app.EfficientSS.beans.Item_Details;
import com.app.EfficientSS.beans.Transporter;
import com.app.EfficientSS.dao.BidderDao;
import com.app.EfficientSS.dao.CustomerDao;
import com.app.EfficientSS.dao.ItemDao;
import com.app.EfficientSS.dao.TransporterDao;
import java.util.*;

@Service
public class BidderServiceImpl implements BidderService {

	
	@Autowired
	private BidderDao  bdao;
	
	@Autowired
	private CustomerDao customerdao;
	
	@Autowired
	private ItemDao itemDao;
	@Autowired
    private TransporterDao tdao;

	@Override
	public ResponseEntity<Bidder> setBidderNoAuction(long t_id, int item_id, int cust_id, double price) {
		
	try {
		Bidder bidder=new Bidder();
		Transporter trans=tdao.getById(t_id);
		Customer cust=customerdao.getById(cust_id);
		Item_Details item=itemDao.findByItemId(item_id);
		item.setOperation_status("Direct Booked");
		bidder.setB_name(trans.getT_full_name());
		bidder.setB_ph_no(trans.getT_ph_no());
		bidder.setB_price(price);												
		bidder.setB_selection_status("Selected");
		
		bidder.setTransporter(trans);
		bdao.save(bidder);
		
		List<Bidder> b1=new ArrayList<Bidder>();
		List<Customer> c1=new ArrayList<Customer>();
		List<Item_Details> i1=new ArrayList<Item_Details>();
		
		b1.add(bidder);
		c1.add(cust);
		i1.add(item);
		
		cust.setBidder(b1);
		bidder.setCustomer(c1);
		
		item.setBidder(b1);
		bidder.setItem_detail(i1);
		
		Bidder bid=bdao.save(bidder);
		customerdao.save(cust);
		itemDao.save(item);
		
		return new ResponseEntity<>(bid,HttpStatus.CREATED);
	} catch (Exception e) {
		return new ResponseEntity<>(HttpStatus.EXPECTATION_FAILED);
	}
	}

	@Override
	public List<Bidder> HistoryDirectBidder() {
			
			try {
				//List<Bidder> bid=B_repo.findAllSelected();
				
				List<Item_Details> idetail=itemDao.findAll();
				List<Bidder> bidder= new ArrayList<Bidder>();
				List<Bidder> selectedbidder= new ArrayList<Bidder>();
				
				for (Item_Details i: idetail) {
					if(i.getOperation_status().equalsIgnoreCase("Direct Booked")) {
						 List<Bidder> bid=i.getBidder();
						 for(Bidder b:bid) {
							 bidder.add(b);
						 }
					}
				}
				
				for (Bidder a: bidder) {
					if(a.getB_selection_status().equalsIgnoreCase("Selected")) {
						selectedbidder.add(a);
					}
				}
				
				if(selectedbidder!=null)
					return selectedbidder;
			} catch (Exception e) {
				
				return null;
			}
			
		}
		return null;
	}
}
